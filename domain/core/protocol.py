from twisted.internet.protocol import Protocol, connectionDone
from twisted.python import failure
import struct
from domain.chat.particpant.participant import Participant
from domain.chat.types import MESSAGE_HEADER, MessageType, ResponseType


# Do not edit this file unless you are instructed to do so

class ConnectedClientProtocol(Protocol, Participant):

    def __init__(self, factory):
        self.factory = factory

    def dataReceived(self, data: bytes):
        header = data[0:MESSAGE_HEADER]
        (message_type_value, message_size) = struct.unpack("!HL", header)
        payload: bytes = bytes[MESSAGE_HEADER: message_size + MESSAGE_HEADER]
        self.__process_message(message_type=MessageType(message_type_value), payload=payload)

    def connectionMade(self):
        self.send_message(response_type=ResponseType.REQUEST_IDENTITY, payload=bytes())

    def connectionLost(self, reason: failure.Failure = connectionDone):
        self.factory.remove(self)

    def __process_message(self, message_type: MessageType, payload: bytes) -> None:
        if message_type == MessageType.IDENTITY:
            self.factory.register(self, payload)
        else:
            self.factory.forward_message(self, payload=payload)

    def send_message(self, response_type: ResponseType, payload: bytes) -> None:
        packet = struct.pack("!HL", response_type.value, len(payload)) + payload
        self.transport.write(data=packet)
